% Main programs starts here
function [best,fmin,N_iter]=init_bat(para,net,inputn,outputn)
% Default parameters
n=para(1);      % Population size, typically 10 to 40
N_gen=para(2);  % Number of generations
A=para(3);      % Loudness  (constant or decreasing)
r=para(4);      % Pulse rate (constant or decreasing)
inputnum=para(5);
hiddennu=para(6);
outputnum=para(7);
alpha=0.9;        %音量的衰减系数
gema=0.9;        %搜索频率的增强系数
% This frequency range determines the scalings
% You should change these values if necessary
Qmin=0;         % Frequency minimum
Qmax=2;         % Frequency maximum
% Iteration parameters
N_iter=0;       % Total number of function evaluations
% Dimension of the search variables
d=(1+inputnum)*hiddennum+(1+hiddennum)*outputnum;           % Number of dimensions 
% Lower limit/bounds/ a vector
Lb=-2*ones(1,d);
% Upper limit/bounds/ a vector
Ub=2*ones(1,d);
% Initializing arrays
Q=zeros(n,1);   % Frequency
v=zeros(n,d);   % Velocities
% Initialize the population/solutions
for i=1:n
  Sol(i,:)=Lb+(Ub-Lb).*rand(1,d);
  %Fitness(i)=Fun(Sol(i,:));
end
[Fitness,outputNN]=BA_fitcal(Sol,net,hiddennum,inputn,outputn,0);
% Find the initial best solution
[fmin,I]=min(Fitness);
best=Sol(I,:);

% ======================================================  %
% Note: As this is a demo, here we did not implement the  %
% reduction of loudness and increase of emission rates.   %
% Interested readers can do some parametric studies       %
% and also implementation various changes of A and r etc  %
% ======================================================  %

% Start the iterations -- Bat Algorithm (essential part)  %
for t=1:N_gen, 
% Loop over all bats/solutions
        for i=1:n,
          Q(i)=Qmin+(Qmin-Qmax)*rand;
          v(i,:)=v(i,:)+(Sol(i,:)-best)*Q(i);
          S(i,:)=Sol(i,:)+v(i,:);
          % Apply simple bounds/limits
          Sol(i,:)=simplebounds(Sol(i,:),Lb,Ub);
          % Pulse rate
          %根据神经网络来计算各个蝙蝠个体的适应度
%           [Fitness,outputNN]=BA_fitcal(Sol,net,hiddennum,inputn,outputn,0);
          if rand>r
          % The factor 0.001 limits the step sizes of random walks 
              S(i,:)=best+0.001*randn(1,d);
          end
          [Fitness,outputNN]=BA_fitcal(S,net,hiddennum,inputn,outputn,0);
     % Evaluate new solutions
%             Fnew=Fun(S(i,:));
     % Update if the solution improves, or not too loud
           if (Fnew<=Fitness(i)) && (rand<A) ,
                Sol(i,:)=S(i,:);
                 %Fitness(i)=Fnew;
                A=alpha*A;
                r=r*(1-exp(-gema*t));
           end
           [fmin,I]=min(Fitness);
           best=S(I,:);
          % Update the current best solution
%           if Fnew<=fmin,
%                 best=S(i,:);
%                 fmin=Fnew;
          end
        end
        N_iter=N_iter+n;
end


